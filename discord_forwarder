#!/usr/bin/env python
# https://discord.com/developers/docs/resources/channel#create-message
import os
import sys
from typing import List
import requests
import datetime

'''discord_forwarder is a CLI for posting to a discord channel'''

if len(sys.argv) < 3:
    sys.exit(f"USAGE: {sys.argv[0]} <comma separated list of channel IDs> <message>")

base_url = 'https://discord.com/api'

# read the bot token from env var
bot_token=os.environ.get('BOT_TOKEN')
if not bot_token:
    sys.exit("ERROR: you must define the environment variable BOT_TOKEN")

headers = {"Authorization": f"Bot {bot_token}"} 

def get_channel_list(channels: str) -> (List):
    '''Validate that the channels string can be converted into a list of ints.'''
    channel_list = []
    try:
        for channel in channels.split(","):
            channel_list.append(int(channel.strip()))
    except:
        sys.exit(f"ERROR: invalid channel list: {channels}")
    return channel_list

# I was going to pass in channels as an environment variable but decided to pass them in as an argument instead:
# channels=os.environ.get('CHANNELS')
channel_ids=get_channel_list(sys.argv[1])

def post_to_channel(channel_id: str, message: str):
    '''Submit a message to a discord channel.'''
    log_date = datetime.datetime.now()
    path = f'/channels/{channel_id}/messages'
    full_url = f"{base_url}{path}"
    data={
        "content": message
    }  
    try:
        response  = requests.post(full_url, headers=headers, json=data)
        response.raise_for_status()
        print(f"{log_date} INFO: {full_url} status code: {response.status_code}")
    except requests.exceptions.HTTPError as e:
        print(f"{log_date} ERROR: {e}", file=sys.stderr)
    except requests.exceptions.RequestException as e:
        print(f"{log_date} ERROR: {e}", file=sys.stderr)

if __name__ == "__main__":
    for channel in channel_ids:
        post_to_channel(channel, sys.argv[2])






